/*
* Braze Web SDK v2.2.2
* (c) Braze, Inc. 2018 - http://braze.com
* License available at https://github.com/Appboy/appboy-web-sdk/blob/master/LICENSE
* Compiled on 2018-06-21
*/
var sharedLib={EncodingUtils:{}};sharedLib.EncodingUtils.urlBase64ToUint8Array=function(a){var c="=".repeat((4-a.length%4)%4);a=(a+c).replace(/\-/g,"+").replace(/_/g,"/");a=atob(a);for(var c=new Uint8Array(a.length),b=0;b<a.length;++b)c[b]=a.charCodeAt(b);return c};
sharedLib.EventTypes={CustomEvent:"ce",InAppPurchase:"p",PushClickEvent:"pc",PushCategoryActionEvent:"ca",PushDeliveryEvent:"pd",InternalEvent:"i",InternalErrorEvent:"ie",ContentCardImpressionEvent:"cci",ControlContentCardImpressionEvent:"ccic",ContentCardClickEvent:"ccc",ContentCardDismissEvent:"ccd",SessionStartEvent:"ss",SessionEndEvent:"se",InAppMessageImpressionEvent:"si",InAppMessageClickEvent:"sc",InAppMessageButtonClickEvent:"sbc",ControlInAppMessageImpressionEvent:"iec",LocationRecorded:"lr",
Alias:"uae",CardImpressionEvent:"ci",CardClickEvent:"cc"};sharedLib.InternalEventTypes={FeedDisplayed:"feed_displayed",ContentCardsDisplayed:"content_cards_displayed"};sharedLib.Guid=function(){};sharedLib.Guid.getGuid=function(){function a(a){var b=(Math.random().toString(16)+"000000000").substr(2,8);return a?"-"+b.substr(0,4)+"-"+b.substr(4,4):b}return a()+a(!0)+a(!0)+a()};
sharedLib.IndexedDBAdapter=function(a,c){this.__parent="undefined"===typeof window?self:window;this.__database=a;this.__logger=c};sharedLib.IndexedDBAdapter.DATABASES={SERVICE_WORKER_STORAGE:{DATABASE_NAME:"AppboyServiceWorkerAsyncStorage",VERSION:5,OBJECT_STORES:{DATA:"data",PUSH_CLICKS:"pushClicks",PUSH_SUBSCRIBED:"pushSubscribed",FALLBACK_DEVICE:"fallbackDevice",CARD_UPDATES:"cardUpdates",OPT_OUT:"optOut"},STATIC_ID:1}};
sharedLib.IndexedDBAdapter.prototype._getIndexedDB=function(){if("indexedDB"in this.__parent)return this.__parent.indexedDB};sharedLib.IndexedDBAdapter.prototype._isSupported=function(){return null!=this._getIndexedDB()};
sharedLib.IndexedDBAdapter.prototype._withDatabase=function(a,c){var b=this._getIndexedDB().open(this.__database.DATABASE_NAME,this.__database.VERSION);if(null==b)return"function"===typeof c&&c(),!1;var d=this;b.onupgradeneeded=function(a){d.__logger.info("Upgrading indexedDB "+d.__database.DATABASE_NAME+" to v"+d.__database.VERSION+"...");a=a.target.result;for(var b in d.__database.OBJECT_STORES)d.__database.OBJECT_STORES.hasOwnProperty(b)&&!a.objectStoreNames.contains(d.__database.OBJECT_STORES[b])&&
a.createObjectStore(d.__database.OBJECT_STORES[b])};b.onsuccess=function(b){d.__logger.debug("Opened indexedDB "+d.__database.DATABASE_NAME+" v"+d.__database.VERSION);var e=b.target.result;e.onversionchange=function(){e.close();"function"===typeof c&&c();d.__logger.error("Needed to close the database unexpectedly because of an upgrade in another tab")};a(e)};b.onerror=function(a){d.__logger.info("Could not open indexedDB "+d.__database.DATABASE_NAME+" v"+d.__database.VERSION+": "+a.target.errorCode);
"function"===typeof c&&c();return!0};return!0};
sharedLib.IndexedDBAdapter.prototype.setItem=function(a,c,b,d,f){if(!this._isSupported())return"function"===typeof f&&f(),!1;var e=this;return this._withDatabase(function(h){h.objectStoreNames.contains(a)?(h=h.transaction([a],"readwrite").objectStore(a).put(b,c),h.onerror=function(){e.__logger.error("Could not store object "+c+" in "+a+" on indexedDB "+e.__database.DATABASE_NAME);"function"===typeof f&&f()},h.onsuccess=function(){e.__logger.debug("Stored object "+c+" in "+a+" on indexedDB "+e.__database.DATABASE_NAME);
"function"===typeof d&&d()}):(e.__logger.error("Could not store object "+c+" in "+a+" on indexedDB "+e.__database.DATABASE_NAME+" - "+a+" is not a valid objectStore"),"function"===typeof f&&f())},f)};
sharedLib.IndexedDBAdapter.prototype.getItem=function(a,c,b){if(!this._isSupported())return!1;var d=this;return this._withDatabase(function(f){f.objectStoreNames.contains(a)?(f=f.transaction([a],"readonly").objectStore(a).get(c),f.onerror=function(){d.__logger.error("Could not retrieve object "+c+" in "+a+" on indexedDB "+d.__database.DATABASE_NAME)},f.onsuccess=function(e){d.__logger.debug("Retrieved object "+c+" in "+a+" on indexedDB "+d.__database.DATABASE_NAME);e=e.target.result;null!=e&&b(e)}):
d.__logger.error("Could not retrieve object "+c+" in "+a+" on indexedDB "+d.__database.DATABASE_NAME+" - "+a+" is not a valid objectStore")})};
sharedLib.IndexedDBAdapter.prototype.getLastItem=function(a,c,b){if(!this._isSupported())return"function"===typeof b&&b(),!1;var d=this;return this._withDatabase(function(f){f.objectStoreNames.contains(a)?(f=f.transaction([a],"readonly").objectStore(a).openCursor(null,"prev"),f.onerror=function(){d.__logger.error("Could not open cursor for "+a+" on indexedDB "+d.__database.DATABASE_NAME);"function"===typeof b&&b()},f.onsuccess=function(e){e=e.target.result;null!=e&&null!=e.value&&null!=e.key?(d.__logger.debug("Retrieved last record "+
e.key+" in "+a+" on indexedDB "+d.__database.DATABASE_NAME),c(e.key,e.value)):"function"===typeof b&&b()}):(d.__logger.error("Could not retrieve last record from "+a+" on indexedDB "+d.__database.DATABASE_NAME+" - "+a+" is not a valid objectStore"),"function"===typeof b&&b())},b)};
sharedLib.IndexedDBAdapter.prototype.deleteItem=function(a,c){if(!this._isSupported())return!1;var b=this;return this._withDatabase(function(d){d.objectStoreNames.contains(a)?(d=d.transaction([a],"readwrite").objectStore(a)["delete"](c),d.onerror=function(){b.__logger.error("Could not delete record "+c+" from "+a+" on indexedDB "+b.__database.DATABASE_NAME)},d.onsuccess=function(){b.__logger.debug("Deleted record "+c+" from "+a+" on indexedDB "+b.__database.DATABASE_NAME)}):b.__logger.error("Could not delete record "+
c+" from "+a+" on indexedDB "+b.__database.DATABASE_NAME+" - "+a+" is not a valid objectStore")})};
sharedLib.IndexedDBAdapter.prototype.getAndDeleteAll=function(a,c){if(!this._isSupported())return!1;var b=this;return this._withDatabase(function(d){if(d.objectStoreNames.contains(a)){var f=d.transaction([a],"readwrite").objectStore(a);d=f.openCursor();var e=[];d.onerror=function(){0<e.length?(b.__logger.info("Cursor closed midway through for "+a+" on indexedDB "+b.__database.DATABASE_NAME),c(e)):b.__logger.error("Could not open cursor for "+a+" on indexedDB "+b.__database.DATABASE_NAME)};d.onsuccess=
function(a){var b=a.target.result;null!=b?(null!=b.value&&null!=b.key&&(f["delete"](b.key).onsuccess=function(){e.push(b.value)}),b.continue()):0<e.length&&c(e)}}else b.__logger.error("Could not retrieve objects from "+a+" on indexedDB "+b.__database.DATABASE_NAME+" - "+a+" is not a valid objectStore")})};
sharedLib.IndexedDBAdapter.prototype.clearData=function(){if(!this._isSupported())return!1;var a=[],c;for(c in this.__database.OBJECT_STORES)this.__database.OBJECT_STORES.hasOwnProperty(c)&&this.__database.OBJECT_STORES[c]!==this.__database.OBJECT_STORES.OPT_OUT&&a.push(this.__database.OBJECT_STORES[c]);var b=this;return this._withDatabase(function(d){d=d.transaction(a,"readwrite");for(var c=0;c<a.length;c++){var e=d.objectStore(a[c]).clear();e.onsuccess=function(){b.__logger.debug("Cleared "+this.source.name+
" on indexedDB "+b.__database.DATABASE_NAME)};e.onerror=function(){b.__logger.error("Could not clear "+this.source.name+" on indexedDB "+b.__database.DATABASE_NAME)}}d.oncomplete=function(){b.__logger.debug("Cleared all object stores on indexedDB "+b.__database.DATABASE_NAME)};d.onerror=function(){b.__logger.error("Could not clear object stores on indexedDB "+b.__database.DATABASE_NAME)}})};
sharedLib.logger={init:function(a){if(void 0!==a||void 0===sharedLib.logger.__loggingEnabled)sharedLib.logger.__loggingEnabled=!!a;sharedLib.logger.__initialized||(sharedLib.logger.__initialized=!0)},destroy:function(){sharedLib.logger.__initialized=!1;sharedLib.logger.__loggingEnabled=void 0;sharedLib.logger.__logger=void 0},setLogger:function(a){"function"!==typeof a?sharedLib.logger.info("Ignoring setLogger call since logger is not a function"):(sharedLib.logger.init(),sharedLib.logger.__logger=
a)},toggleAppboyLogging:function(){sharedLib.logger.init();sharedLib.logger.__loggingEnabled?(console.log("Disabling Appboy logging"),sharedLib.logger.__loggingEnabled=!1):(console.log("Enabled Appboy logging"),sharedLib.logger.__loggingEnabled=!0)},debug:function(a){sharedLib.logger.__loggingEnabled&&null!=sharedLib.logger.__logger&&sharedLib.logger.__logger("Appboy: "+a)},info:function(a){sharedLib.logger.__loggingEnabled&&(null!=sharedLib.logger.__logger?sharedLib.logger.__logger("Appboy: "+a):
console.log("Appboy: "+a))},error:function(a){sharedLib.logger.__loggingEnabled&&(null!=sharedLib.logger.__logger?sharedLib.logger.__logger("Appboy SDK Error: "+a):console.error("Appboy SDK Error: "+a))}};var sw={AmpUtils:{}};sw.AmpUtils.SDK_FLAVOR="amp";sw.AmpUtils.WorkerMessengerCommand={AMP_SUBSCRIPTION_STATE:"amp-web-push-subscription-state",AMP_SUBSCRIBE:"amp-web-push-subscribe",AMP_UNSUBSCRIBE:"amp-web-push-unsubscribe"};
sw.AmpUtils.broadcastReply=function(a,c){self.clients.matchAll().then(function(b){for(var d=0;d<b.length;d++)b[d].postMessage({command:a,payload:c})})};
sw.AmpUtils.generateAndSendAMPSubscriptionToServer=function(a,c,b,d){return sw.RequestUtils.buildSubscriptionOptions(a,c,b,d,sw.AmpUtils.SDK_FLAVOR).then(function(a){return self.registration.pushManager.subscribe(a)}).then(function(f){sw.AmpUtils.broadcastReply(sw.AmpUtils.WorkerMessengerCommand.AMP_SUBSCRIBE,null);return sw.RequestUtils.sendUpSubscriptionInfo(a,c,b,d,f,sw.AmpUtils.SDK_FLAVOR,"Successfully sent AMP push subscription to Braze backend.","Unable to send AMP push subscription to Braze backend.")}).catch(function(){sharedLib.logger.error("Failed to subscribe for AMP push.");
return Promise.reject()})};sw.AmpUtils.subscriptionStateRequest=function(){self.registration.pushManager.getSubscription().then(function(a){return a?self.registration.pushManager.permissionState(a.options):null}).then(function(a){sw.AmpUtils.broadcastReply(sw.AmpUtils.WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE,"granted"===a)})};
sw.AmpUtils.subscribe=function(){var a=sharedLib.IndexedDBAdapter.DATABASES.SERVICE_WORKER_STORAGE,c=new sharedLib.IndexedDBAdapter(a,sharedLib.logger);return(new Promise(function(b,d){c.getLastItem(a.OBJECT_STORES.DATA,function(a,c){sw.AmpUtils.generateAndSendAMPSubscriptionToServer(c.data.api_key,c.baseUrl,c.data.device_id,c.userId).then(function(){b()}).catch(function(){d()})},function(){var f=sw.UrlUtils.getApiKey(self.location.search),e=sw.UrlUtils.getBaseUrl(self.location.search);c.getLastItem(a.OBJECT_STORES.FALLBACK_DEVICE,
function(a,c){sw.AmpUtils.generateAndSendAMPSubscriptionToServer(f,e,c,null).then(function(){b()}).catch(function(){d()})},function(){var h=sharedLib.Guid.getGuid();(new Promise(function(b,d){c.setItem(a.OBJECT_STORES.FALLBACK_DEVICE,a.STATIC_ID,h,b,d)})).then(function(){return sw.AmpUtils.generateAndSendAMPSubscriptionToServer(f,e,h,null)}).then(function(){b()}).catch(function(){d()})})})})).then(function(){return new Promise(function(b,d){c.setItem(a.OBJECT_STORES.PUSH_SUBSCRIBED,a.STATIC_ID,!0,
b,d)})})};
sw.AmpUtils.unsubscribe=function(){return self.registration.pushManager.getSubscription().then(function(a){return a.unsubscribe()}).then(function(){sw.AmpUtils.broadcastReply(sw.AmpUtils.WorkerMessengerCommand.AMP_UNSUBSCRIBE,null);var a=sharedLib.IndexedDBAdapter.DATABASES.SERVICE_WORKER_STORAGE,c=new sharedLib.IndexedDBAdapter(a,sharedLib.logger);return(new Promise(function(b,d){c.getLastItem(a.OBJECT_STORES.DATA,function(a,c){sw.RequestUtils.sendUpSubscriptionInfo(c.data.api_key,c.baseUrl,c.data.device_id,
c.userId,null,sw.AmpUtils.SDK_FLAVOR,"Successfully sent AMP push unsubscription to Braze backend.","Unable to send AMP push unsubscription to Braze backend.").then(function(){b()}).catch(function(){d()})},function(){c.getLastItem(a.OBJECT_STORES.FALLBACK_DEVICE,function(a,c){a=sw.UrlUtils.getApiKey(self.location.search);var e=sw.UrlUtils.getBaseUrl(self.location.search);sw.RequestUtils.sendUpSubscriptionInfo(a,e,c,null,null,sw.AmpUtils.SDK_FLAVOR,"Successfully sent AMP push unsubscription to Braze backend.",
"Unable to send AMP push unsubscription to Braze backend.").then(function(){b()}).catch(function(){d()})},function(){sharedLib.logger.error("No device found during unsubscription.");d()})})})).then(function(){return new Promise(function(b,d){c.setItem(a.OBJECT_STORES.PUSH_SUBSCRIBED,a.STATIC_ID,!1,b,d)})})}).catch(function(){sharedLib.logger.error("Failed to unsubscribe for AMP push.");return Promise.reject()})};
self.addEventListener("message",function(a){a.waitUntil(sw.GdprUtils.checkForOptOut().then(function(){switch(a.data.command){case sw.AmpUtils.WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE:return sw.AmpUtils.subscriptionStateRequest(),Promise.resolve();case sw.AmpUtils.WorkerMessengerCommand.AMP_SUBSCRIBE:return sw.AmpUtils.subscribe();case sw.AmpUtils.WorkerMessengerCommand.AMP_UNSUBSCRIBE:return sw.AmpUtils.unsubscribe();default:return Promise.resolve()}}).catch(function(){sharedLib.logger.info("Ignoring message from amp-web-push due to opt-out.");
return Promise.resolve()}))});var NONE_ACTION="ab_none",URI_ACTION="ab_uri";sharedLib.logger.init(!0);
var _logEvent=function(a,c){return sw.GdprUtils.checkForOptOut().then(function(){var b=sharedLib.IndexedDBAdapter.DATABASES.SERVICE_WORKER_STORAGE;(new sharedLib.IndexedDBAdapter(b,sharedLib.logger)).getLastItem(b.OBJECT_STORES.DATA,function(b,f){b=Math.floor(Date.now()/1E3);var d=f.data;d.time=b;a.time=b;a.user_id=f.userId;d.events=[a];d.sdk_version="2.2.2";fetch(f.baseUrl+"/data/",{method:"POST",headers:{"Content-type":"application/json","X-Braze-Api-Key":d.api_key},body:JSON.stringify(d)}).then(function(a){a.ok||
console.error("Appboy SDK Error: Unable to log "+c+": "+a.status);return a.json()}).then(function(a){a.error?console.error("Appboy SDK Error: Unable to log "+c+":",a.error):console.log("Appboy: Successfully logged "+c);return Promise.resolve()}).catch(function(a){console.error("Appboy SDK Error: Unable to log "+c+":",a);return Promise.resolve()})})}).catch(function(){return Promise.reject("Not sending data to Braze backend due to opt-out.")})},showNotification=function(a){if(null==a||0===Object.keys(a).length)console.log("Appboy: server has no pending push message for this registration. Ignoring push event.");
else{var c=a.t,b=a.a,d=a.i,f=a.img,e={url:a.u,ab_ids:{cid:a.cid},extra:a.e},h=a.ri;a.ab_push_fetch_test_triggers_key&&(console.log("Appboy: service worker 2.2.2 found trigger fetch key in push payload."),e.fetchTriggers=!0);var g=a.ab_cd;if(null!=g){var l=sharedLib.IndexedDBAdapter.DATABASES.SERVICE_WORKER_STORAGE;(new sharedLib.IndexedDBAdapter(l,sharedLib.logger)).setItem(l.OBJECT_STORES.CARD_UPDATES,Date.now(),{userId:a.ab_cd_uid,card:g})}for(var g=a.pab||[],l={},m=0;m<g.length;m++)if(null!=
g[m]&&null!=g[m].action){var k;switch(g[m].a){case NONE_ACTION:k=null;break;case URI_ACTION:if(k=g[m].u,null==k||""===k)k="/"}l[g[m].action]=k}e.actionTargets=l;console.log("Appboy: Displaying push notification!");return self.registration.showNotification(c,{body:b,icon:d,image:f,data:e,actions:g,requireInteraction:h}).catch(function(a){sharedLib.logger.info(a)}).then(function(){return _logEvent({name:sharedLib.EventTypes.PushDeliveryEvent,data:{cid:a.cid}},"push delivery")})}};
self.addEventListener("install",function(a){a.waitUntil(self.skipWaiting())});self.addEventListener("activate",function(){return self.clients.claim()});
self.addEventListener("push",function(a){console.log("Appboy: service worker 2.2.2 received push");null!=a.data&&null!=a.data.json?sw.EventUtils.waitAndLogErrors(a,showNotification(a.data.json())):sw.EventUtils.waitAndLogErrors(a,new Promise(function(a,b){var c=sharedLib.IndexedDBAdapter.DATABASES.SERVICE_WORKER_STORAGE;(new sharedLib.IndexedDBAdapter(c,sharedLib.logger)).getLastItem(c.OBJECT_STORES.DATA,function(c,d){var e=d.data;sw.GdprUtils.checkForOptOut().then(function(){return fetch(d.baseUrl+
"/web_push/",{method:"POST",headers:{"Content-type":"application/json","X-Braze-Api-Key":e.api_key},body:JSON.stringify(e)})}).then(function(a){return a.ok?a.json():(console.error("Appboy SDK Error: Unable to retrieve push payload from server: "+a.status),Promise.reject())}).then(function(b){console.log("Appboy: Retrieved push payload from server");a(showNotification(b))}).catch(function(a){b("Appboy SDK Error: Unable to retrieve push payload from server or user has opt-out: "+a)})})}))});
self.addEventListener("notificationclick",function(a){if(a&&a.notification&&(a.notification.close(),null!=Notification&&Notification.prototype.hasOwnProperty("data")&&a.notification.data&&a.notification.data.ab_ids)){var c=null!=a.action&&""!==a.action,b;b=c?_logEvent({name:sharedLib.EventTypes.PushCategoryActionEvent,data:{cid:a.notification.data.ab_ids.cid,a:a.action}},"push button click"):_logEvent({name:sharedLib.EventTypes.PushClickEvent,data:{cid:a.notification.data.ab_ids.cid}},"push click");
var d;if(!c){var f={lastClick:Date.now(),trackingString:a.notification.data.ab_ids.cid};a.notification.data.fetchTriggers&&(f.fetchTriggers=!0);var e=sharedLib.IndexedDBAdapter.DATABASES.SERVICE_WORKER_STORAGE,h=new sharedLib.IndexedDBAdapter(e,sharedLib.logger);d=b.then(function(){return new Promise(function(a,b){h.setItem(e.OBJECT_STORES.PUSH_CLICKS,e.STATIC_ID,f,a,b)})}).catch(function(){sharedLib.logger.info("Not storing push click due to no click event being created.");return Promise.resolve()})}var g;
if(c)g=a.notification.data.actionTargets[a.action];else if(g=a.notification.data.url,null==g||""===g)g="/";var l;null!=g&&""!==g&&(l=clients.matchAll({type:"window"}).then(function(){if(clients.openWindow)return clients.openWindow(g)}));sw.EventUtils.waitAndLogErrors(a,Promise.all([l,d]))}});
self.addEventListener("pushsubscriptionchange",function(a){sw.EventUtils.waitAndLogErrors(a,sw.GdprUtils.checkForOptOut().then(function(){var c={userVisibleOnly:!0};null!=a.oldSubscription&&(c=a.oldSubscription.options);return self.registration.pushManager.subscribe(c)}).then(function(a){var b=sharedLib.IndexedDBAdapter.DATABASES.SERVICE_WORKER_STORAGE;return new Promise(function(c,f){(new sharedLib.IndexedDBAdapter(b,sharedLib.logger)).getLastItem(b.OBJECT_STORES.DATA,function(b,d){sw.RequestUtils.sendUpSubscriptionInfo(d.data.api_key,
d.baseUrl,d.data.device_id,d.userId,a,null,"Successfully resubscribed user after expiration","Unable to resubscribe user").then(function(){c()}).catch(function(){f()})})})}).catch(function(){return Promise.reject("Not resubscribing user for push due to opt-out.")}))});sw.EventUtils={};sw.EventUtils.waitAndLogErrors=function(a,c){a.waitUntil(c.catch(function(a){a&&sharedLib.logger.info(a)}))};sw.GdprUtils={};
sw.GdprUtils.checkForOptOut=function(){return new Promise(function(a,c){var b=sharedLib.IndexedDBAdapter.DATABASES.SERVICE_WORKER_STORAGE;(new sharedLib.IndexedDBAdapter(b,sharedLib.logger)).getLastItem(b.OBJECT_STORES.OPT_OUT,c,a)})};sw.RequestUtils={};
sw.RequestUtils.buildSubscriptionOptions=function(a,c,b,d,f){return new Promise(function(d,h){var e={};e.time=Math.floor(Date.now()/1E3);e.device_id=b;e.api_key=a;e.sdk_version="2.2.2";e.sdk_flavor=f;e.respond_with={config:{config_time:0}};fetch(c+"/data/",{method:"POST",headers:{"Content-type":"application/json","X-Braze-Api-Key":a},body:JSON.stringify(e)}).then(function(a){a.ok||sharedLib.logger.error("Unable to get config: "+a.status);return a.json()}).then(function(a){a.error?(sharedLib.logger.error("Unable to get config: "+
a.error),h()):(a={userVisibleOnly:!0,applicationServerKey:sharedLib.EncodingUtils.urlBase64ToUint8Array(a.config.vapid_public_key)},d(a))}).catch(function(a){sharedLib.logger.error("Unable to get config: "+a);h()})})};
sw.RequestUtils.sendUpSubscriptionInfo=function(a,c,b,d,f,e,h,g){return new Promise(function(l,m){var k={};k.device_id=b;k.api_key=a;k.sdk_version="2.2.2";null!=e&&(k.sdk_flavor=e);var n=null,p=null,q=null;f&&(q=f.endpoint,f.getKey&&(n=btoa(String.fromCharCode.apply(null,new Uint8Array(f.getKey("p256dh")))),p=btoa(String.fromCharCode.apply(null,new Uint8Array(f.getKey("auth"))))));k.time=Math.floor(Date.now()/1E3);k.attributes=[{user_id:d,push_token:q,custom_push_public_key:n,custom_push_user_auth:p}];
fetch(c+"/data/",{method:"POST",headers:{"Content-type":"application/json","X-Braze-Api-Key":k.api_key},body:JSON.stringify(k)}).then(function(a){a.ok||sharedLib.logger.error(g+" "+a.status);return a.json()}).then(function(a){a.error?(sharedLib.logger.error(g+" "+a.error),m()):(sharedLib.logger.info(h),l())}).catch(function(a){sharedLib.logger.error(g+" "+a);m()})})};sw.UrlUtils={};
sw.UrlUtils.getApiKey=function(a){if(a=a.match(/apiKey=([^&]+)/i))return a[1];sharedLib.logger.error("Missing API key in query params.");return null};sw.UrlUtils.getBaseUrl=function(a){if(a=a.match(/baseUrl=([^&]+)/i))return a[1];sharedLib.logger.error("Appboy: Missing base URL in query params.");return null};
